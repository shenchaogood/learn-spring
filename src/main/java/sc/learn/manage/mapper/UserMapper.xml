<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sc.learn.manage.mapper.UserMapper" >
	
	<sql id="query_user">
		select
			t_user.f_id id,
			t_user.f_name name,
			t_user.f_password password,
			t_user.f_email email,
			t_user.f_create_time createTime,
			t_user.f_update_time updateTime,
			t_role.f_id roleId,
			t_role.f_name roleName,
			t_role.f_description roleDescription,
			t_role.f_create_time roleCreateTime,
			t_role.f_update_time roleUpdateTime,
			t_privilege.f_id privilegeId,
			t_privilege.f_name privilegeName,
			t_privilege.f_description privilegeDescription,
			t_privilege.f_url url,
			t_privilege.f_icon icon,
			t_privilege.f_leaf leaf,
			t_privilege.f_create_time privilegeCreateTime,
			t_privilege.f_update_time privilegeUpdateTime
		from
			t_user
		left join
			(
			t_role,
			t_user_role
			)
		on
			(
			t_user.f_id=t_user_role.f_user_id and 
			t_user_role.f_role_id=t_role.f_id
			)
		left join
			(
			t_privilege,
			t_role_privilege
			)
		on 
			(
			t_role.f_id=t_role_privilege.f_role_id and
			t_role_privilege.f_privilege_id=t_privilege.f_id
			)
	</sql>

	<resultMap type="user" id="UserResultMap">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<result column="password" property="password"/>
		<result column="email" property="email"/>
		<result column="createTime" property="createTime"/>
		<result column="updateTime" property="updateTime"/>
		
		<collection property="roles" ofType="role">
		 	<id column="roleId" property="id"/>
		 	<result column="roleName" property="name"/>
		 	<result column="roleDescription" property="description"/>
		 	<result column="roleCreateTime" property="createTime"/>
			<result column="roleUpdateTime" property="updateTime"/>
		 	
		 	<collection property="privileges" ofType="privilege">
		 		<id column="privilegeId" property="id"/>
			 	<result column="privilegeName" property="name"/>
			 	<result column="privilegeDescription" property="description"/>
			 	<result column="url" property="url"/>
			 	<result column="icon" property="icon"/>
			 	<result column="leaf" property="leaf"/>
			 	<result column="privilegeCreateTime" property="createTime"/>
				<result column="privilegeUpdateTime" property="updateTime"/>
		 	</collection>
		</collection>
	</resultMap>


	<insert id="insert" parameterType="user">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_id() as id
		</selectKey>
		insert ignore into t_user(f_name,f_password,f_email) values(#{name},#{password},#{email})
	</insert>
	
	<insert id="insertUserRoles" parameterType="user" >
		insert into t_user_role (f_user_id,f_role_id) values 
		<foreach collection="roles" item="role" open="" close="" separator=",">
			(#{id},#{role.id})
		</foreach>
	</insert>
	
	<delete id="deleteById" parameterType="int">
		delete from f_user where f_id = #{value}
	</delete>
	
	<delete id="deleteUserRoles" parameterType="int">
		delete from f_user_role where f_user_id = #{id}
	</delete>
	
	<update id="update" parameterType="user">
		update 
			t_user 
		<set>
			<if test="name!=null">
				f_name=#{name},
			</if>
			<if test="password!=null">
				f_password=#{password},
			</if>
			<if test="email!=null">
				f_email=#{email},
			</if>
			f_update_time=now()
		</set>
		<where>
			f_id=#{id}
		</where>
	</update>
	
	<select id="selectById" parameterType="int" resultMap="UserResultMap">
		<include refid="query_user"></include>
		<where>
			t_user.f_id=#{value}
		</where>
	</select>
	
	<select id="selectByEmailPassword" resultMap="UserResultMap">
		<include refid="query_user"></include>
		<where>
			t_user.f_name=#{email} and 
			t_user.f_password=#{password}
		</where>
	</select>
	
	<select id="selectAll" resultMap="UserResultMap">
		<include refid="query_user"></include>
	</select>
	
	<select id="selectCount" resultType="int">
		select count(f_id) from t_user
	</select>
</mapper>